#import "BaseApi.h"
#import "Error.h"
#import "NSError+Extra.h"
#import "NSString+Path.h"

@implementation Request

- (NSMutableDictionary*)pathParams
{
    if (_pathParams == nil)
        _pathParams = [NSMutableDictionary dictionary];
    return _pathParams;
}

- (NSMutableDictionary*)queryParams
{
    if (_queryParams == nil)
        _queryParams = [NSMutableDictionary dictionary];
    return _queryParams;
}

- (void)send
{
    void (^success)(RKObjectRequestOperation*, RKMappingResult*) = ^void(RKObjectRequestOperation* operation, RKMappingResult* mappingResult)
    {
        self.successBlock(self.resultType == ResultTypeOne ? operation.mappingResult.firstObject : operation.mappingResult.array);
    };
    void (^failure)(RKObjectRequestOperation*, NSError*) = ^void(RKObjectRequestOperation* operation, NSError* error)
    {
        Error* errorObject = [operation.error.userInfo[RKObjectMapperErrorObjectsKey] firstObject];
        if (errorObject != nil)
        {
            NSInteger httpCode = operation.HTTPRequestOperation.response.statusCode;
            if (errorObject.code == nil)
                errorObject.code = [@(httpCode) stringValue];
            error = [NSError errorWithErrorObject:[operation.error.userInfo[RKObjectMapperErrorObjectsKey] firstObject] httpCode:httpCode];
        }
        self.errorBlock(error);
    };

    NSMutableURLRequest* request = [[BaseApi objectManager] requestWithObject:_body method:RKRequestMethodFromString([self.method uppercaseString]) path:[_path pathWithParams:_pathParams] parameters:_queryParams];

    [request setValue:@"gzip,deflate" forHTTPHeaderField:@"Accept-Encoding"];
    [request setTimeoutInterval:300]; // set the timeout for request to 5 minutes

    RKManagedObjectRequestOperation* op = [[BaseApi objectManager] managedObjectRequestOperationWithRequest:request managedObjectContext:[BaseApi objectManager].managedObjectStore.mainQueueManagedObjectContext success:success failure:failure];
    [[BaseApi objectManager] enqueueObjectRequestOperation:op];
}

@end

@implementation BaseApi

+ (void)initialize
{
    [super initialize];
    RKLogConfigureByName("RestKit/Network", RKLogLevelInfo);
    [RKObjectManager setSharedManager:[RKObjectManager managerWithBaseURL:BASE_URL]];
    [self addErrorResponseDescriptor];
}

+ (RKObjectManager*)objectManager
{
    return [RKObjectManager sharedManager];
}

+ (void)addResponseDescriptorWithMapping:(RKMapping*)mapping method:(RKRequestMethod)method path:(NSString*)path
{
    RKResponseDescriptor* responseDescriptor = [RKResponseDescriptor responseDescriptorWithMapping:mapping
                                                                                            method:method
                                                                                       pathPattern:[path rkPathPattern]
                                                                                           keyPath:@""
                                                                                       statusCodes:RKStatusCodeIndexSetForClass(RKStatusCodeClassSuccessful)];
    [[self objectManager] addResponseDescriptor:responseDescriptor];
}

+ (void)addErrorResponseDescriptor
{
    RKResponseDescriptor* errorResponseDescriptor = [RKResponseDescriptor responseDescriptorWithMapping:[Error entityMapping]
                                                                                                 method:RKRequestMethodAny
                                                                                            pathPattern:nil
                                                                                                keyPath:@""
                                                                                            statusCodes:[self errorStatusCodes]];
    [[self objectManager] addResponseDescriptor:errorResponseDescriptor];
}

#pragma mark -
#pragma mark *** Private Interface ***
#pragma mark -

+ (NSIndexSet*)errorStatusCodes
{
    NSMutableIndexSet* codes = [[NSMutableIndexSet alloc] init];
    [codes addIndexes:RKStatusCodeIndexSetForClass(RKStatusCodeClassClientError)];
    [codes addIndexes:RKStatusCodeIndexSetForClass(RKStatusCodeClassServerError)];
    return codes;
}

@end
