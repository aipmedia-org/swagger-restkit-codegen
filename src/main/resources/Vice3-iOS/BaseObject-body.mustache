#import "BaseObject.h"
#import "BaseApi.h"

@implementation BaseObject

+ (void)initialize
{
    [super initialize];

    NSString* className = NSStringFromClass(self);
    if ([className hasSuffix:@"Request"] || [className hasSuffix:@"Response"]) // temp data containers
        if ([self getEntities].count > 0)
            [[self class] removeAll];
}

+ (RKObjectMapping*)objectMapping
{
    return nil;
}

+ (RKRequestDescriptor*)requestDescriptor
{
    return [RKRequestDescriptor requestDescriptorWithMapping:[[self objectMapping] inverseMapping] objectClass:[self class] rootKeyPath:nil method:RKRequestMethodAny];
}

+ (RKEntityMapping*)entityMapping
{
    return nil;
}

+ (NSArray*)getEntities
{
    return [self getEntitiesWithPredicate:nil sortDescriptors:nil];
}

+ (id)getFirstWithPredicate:(NSPredicate*)predicate
{
    return [self getEntitiesWithPredicate:predicate sortDescriptors:nil].firstObject;
}

+ (id)getFirstWithUid:(id)uid
{
    if (uid == nil)
        return nil;
    else
        return [self getFirstWithPredicate:[NSPredicate predicateWithFormat:@"%K = %@", [CoreDataManager identifierForClass:[self class]], uid]];
}

+ (id)getEntitiesWithPredicate:(NSPredicate*)predicate sortDescriptors:(NSArray*)sortDescriptors
{
    return [CoreDataManager getEntitiesWithName:NSStringFromClass([self class]) predicate:predicate sortDescriptors:sortDescriptors];
}

+ (instancetype)newInDb
{
    return [NSEntityDescription insertNewObjectForEntityForName:NSStringFromClass([self class]) inManagedObjectContext:[RKManagedObjectStore defaultStore].mainQueueManagedObjectContext];
}

+ (void)save
{
    [CoreDataManager save];
}

+ (void)removeAll
{
    [CoreDataManager execSqlQuery:[NSString stringWithFormat:@"DELETE FROM Z%@", [NSStringFromClass([self class]) uppercaseString]]];
}

- (void)remove
{
    [[RKManagedObjectStore defaultStore].mainQueueManagedObjectContext deleteObject:self];
    [[self class] save];
}

- (NSDictionary*)toDictionary
{
    return [RKObjectParameterization parametersWithObject:self requestDescriptor:[[self class] requestDescriptor] error:nil];
}

- (NSString*)description
{
    return [[self toDictionary] description];
}

@end
