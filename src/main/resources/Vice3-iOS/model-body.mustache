{{#models}}
{{#model}}
#import "{{classname}}.h"

#import <objc/message.h>

@implementation {{classname}}

{{#vars}}@dynamic {{name}};
{{/vars}}

+ (RKObjectMapping*)objectMapping
{
    RKObjectMapping* objectMapping = [RKObjectMapping mappingForClass:[self class]];
    {{#vars}}{{#isPrimitiveType}}[objectMapping addPropertyMapping:[RKAttributeMapping attributeMappingFromKeyPath:@"{{baseName}}" toKeyPath:@"{{name}}"]];{{/isPrimitiveType}}{{^isPrimitiveType}}[objectMapping addPropertyMapping:[RKRelationshipMapping relationshipMappingFromKeyPath:@"{{baseName}}" toKeyPath:@"{{name}}" withMapping:[{{complexType}} objectMapping]]];{{/isPrimitiveType}}
    {{/vars}}
    return objectMapping;
}

+ (RKEntityMapping*)entityMapping
{
    RKEntityMapping* entityMapping = [RKEntityMapping mappingForEntityForName:NSStringFromClass([self class]) inManagedObjectStore:[RKManagedObjectStore defaultStore]];
    {{#vars}}{{#isPrimitiveType}}[entityMapping addPropertyMapping:[RKAttributeMapping attributeMappingFromKeyPath:@"{{baseName}}" toKeyPath:@"{{name}}"]];{{/isPrimitiveType}}{{^isPrimitiveType}}[entityMapping addPropertyMapping:[RKRelationshipMapping relationshipMappingFromKeyPath:@"{{baseName}}" toKeyPath:@"{{name}}" withMapping:[{{complexType}} entityMapping]]];{{/isPrimitiveType}}
    {{/vars}}
    NSString* identifier = [CoreDataManager identifierForClass:[self class]];
    if (identifier != nil)
        entityMapping.identificationAttributes = @[identifier];
    
    return entityMapping;
}
{{#vars}}{{#isContainer}}{{#complexType}}
- (void)add{{complexType}}:({{complexType}}*)object
{
    NSMutableOrderedSet* set = [self mutableOrderedSetValueForKey:@"{{name}}"];
    [set addObject:object];
}

- (void)remove{{complexType}}:({{complexType}}*)object
{
    NSMutableOrderedSet* set = [self mutableOrderedSetValueForKey:@"{{name}}"];
    [set removeObject:object];    
}
{{/complexType}}{{/isContainer}}{{/vars}}

{{/model}}
@end
{{/models}}
